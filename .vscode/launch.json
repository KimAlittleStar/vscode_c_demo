{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    // 
    //这里我们需要注意修改的是:"miDebuggerPath": "C:/Qt/Tools/mingw730_64/bin/gdb.exe"
    //
    //这里gdb的路径应该是你自己的gdb 文件路径
    // 
    // "program": "${workspaceFolder}/${workspaceRootFolderName}.exe"
    // 这里调用的exe 应就是 task build-debug 中生成的可执行文件;
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(gdb) 启动", //名字,会显示在debug 的选项中
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/${workspaceRootFolderName}.exe", //表示要调试的可执行文件在当前打开的文件下下的这个文件,此名称需要和task 中的target=<>,一一对应;
            "args": [],
            "stopAtEntry": false, //时候要在main函数处自动停止,false表示不会停止,true表示会在main函数处自动停止;
            "cwd": "${workspaceFolder}", //表示首先要切换到当前目录下
            "environment": [],
            "externalConsole": true, //为true时,会新建一个黑窗口运行程序,如果为false ,就会在vscode中新建终端,
            //不过这样就需要在用户设置中设置默认bash 为 gitbash,否则会报错
            "MIMode": "gdb",
            "miDebuggerPath": "C:/Qt/Tools/mingw730_64/bin/gdb.exe", // 这里填写的应该是你自己gdb.exe文件的路径;一般与g++.exe minwg32-make.exe 在同一文件夹下
            "setupCommands": [
                {
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "build-debug" //在执行这个gdb launcher 之前,首先执行task build-debug;
        }
    ]
}